from gc import callbacks

import telebot
from pyexpat.errors import messages
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove

from config import UsersTable
import os

import pandas as pd

from datetime import datetime, timedelta

# dev
from icecream import ic

#from gptgovno import user_message_ids

# dev

API_TOKEN = '7712920785:AAGLtViAA6H34GcDBBy896TCZX_mwwjM80M' # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô
bot = telebot.TeleBot(API_TOKEN)



# user

db = UsersTable()

questions = [
    ("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞? ‚ú®", ["–ë–∞—Ä–∏—Å—Ç–∞", "–ü–æ–≤–∞—Ä"]),  # –û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å
    ("–§–ò–û: üìù", 0),  # –ó–∞–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å
    ("–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: üåç", 0),  # –û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å
    ("–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: üèôÔ∏è", ["–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ö–∏—Ä–æ–≤", "–í–ª–∞–¥–∏–º–∏—Ä", "–°–∞—Ä–∞—Ç–æ–≤", "–ò–∂–µ–≤—Å–∫"]),
    ("–¢–≤–æ–π –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @Name123): üì±", 0),
    ("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: üìû", 0),
    ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç: üéÇ", 0),
    ("–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: üéì", ["–û—á–Ω–∞—è", "–û—á–Ω–æ-–∑–∞–æ—á–Ω–∞—è", "–ó–∞–æ—á–Ω–∞—è", "–ù–µ –æ–±—É—á–∞—é—Å—å"]),
    ("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã, –≥–¥–µ, —Å–∫–æ–ª—å–∫–æ –∏ –∫–µ–º —Ä–∞–±–æ—Ç–∞–ª/–∞): üíº", 0),
    ("–ü—Ä–∏—á–∏–Ω–∞ —É—Ö–æ–¥–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã: ‚ùì",
    ["–ù–µ –ø–æ–¥–æ—à–µ–ª —Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã",
    "–°–ª–æ–∂–Ω–æ —Å–æ–≤–º–µ—â–∞—Ç—å —Å —É—á–µ–±–æ–π",
    "–ù–µ —É—Å—Ç—Ä–∞–∏–≤–∞–ª–∞ –∑/–ø",
    "–ü—Ä–æ–±–ª–µ–º—ã —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º",
    "–ù–µ –Ω—Ä–∞–≤–∏–ª—Å—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤",
    "–ù–µ–∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
    "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Ç–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏",
    "–ü–µ—Ä–µ–µ–∑–¥",
    "–ù–µ —Ä–∞–±–æ—Ç–∞–ª/–∞ —Ä–∞–Ω–µ–µ",
    "–î—Ä—É–≥–æ–µ"]),
    ("–ñ–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã? ‚è∞", 0),
    ("–ñ–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã? üí∞", 0),
    ("–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∏—â–µ—à—å —Ä–∞–±–æ—Ç—É? üìÖ", 0),
    ("–†–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å (–º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ): üìç", 0),
    ("–ö–∞–∫ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏? üîç",
     ["hh.ru",
    "–ê–≤–∏—Ç–æ",
    "–û—Ç –¥—Ä—É–∑–µ–π",
    "–†–µ–∫–ª–∞–º–∞ –í–ö",
    "–†–µ–∫–ª–∞–º–∞ –≤ Telegram",
    "–í —Å–≤–æ–µ–º —É—á–µ–±–Ω–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏",
    "–í –∫–æ—Ñ–µ–π–Ω–µ Coffee Like",
    "–î—Ä—É–≥–æ–µ"])
]

excel_file = 'db/applicants.xlsx'

user_answers = {}
user_question_index = {}
user_message_ids_to_del = {}
user_ids = {}
users_is_poll = set()


def notif_to_admin(user):
    notif_admins = db.get_notif()
    for cht_id in notif_admins:
        cht_id = cht_id[0]
        bot.send_message(cht_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –æ—Å—Ç–∞–≤–∏–ª –≤–∞–∫–∞–Ω—Å–∏—é –±–∞—Ä–∏—Å—Ç–∞")


def add_row_to_excel(file_path, new_row):
    if not os.path.exists(file_path):

        df = pd.DataFrame(columns=new_row.keys())
        df.to_excel(file_path, index=False, engine='openpyxl')


    df = pd.read_excel(file_path, engine='openpyxl')

    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (—Å–ª–æ–≤–∞—Ä—è)
    new_data = pd.DataFrame([new_row])

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É DataFrame
    df = pd.concat([df, new_data], ignore_index=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame –æ–±—Ä–∞—Ç–Ω–æ –≤ Excel —Ñ–∞–π–ª
    df.to_excel(file_path, index=False, engine='openpyxl')

def filter_exel(date: datetime.date, input_file: str):
    output_file = input_file.split('.')[0] + "_" + str(date) + ".xlsx"


    # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
    df = pd.read_excel(input_file)

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–∞–º–∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'date_column' –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞—Ç–∞–º–∏
    df['date'] = pd.to_datetime(df['date'], errors='coerce')

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫, –≥–¥–µ –¥–∞—Ç–∞ –±–æ–ª—å—à–µ 2 –∏—é–Ω—è 2024 –≥–æ–¥–∞
    filtered_df = df[df['date'] >= date]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
    filtered_df.to_excel(output_file, index=False)

    return output_file


# user

# all users

@bot.message_handler(commands= ['start', 'info'], func = lambda message: not message.from_user.id in users_is_poll)
def start(message):
    print(message.from_user.id, message.from_user.username)
    db.add_user({"id": str(message.from_user.id), "username": message.from_user.username, "status": "user", "notif": 1, "chat_id" : message.chat.id})

    usr_id = message.from_user.id
    db.edit_rol(usr_id, 'user')
    if db.is_ban(usr_id):
        bot.reply_to(message=message, text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∞ –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É –±–æ—Ç—É.")
    elif db.is_admin(usr_id):
        hi_text_admin = (
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—éüëã\n"
            "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Coffee Like!\n"
            "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–æ–º, –ø–æ—ç—Ç–æ–º—É —è –ø—Ä–æ–≤–µ–¥—É –í–∞–º –Ω–µ–±–æ–ª—å—à–æ–π —ç–∫—Å–∫—É—Ä—Å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã!\n\n"

            "<b><i>–ö–æ–º–∞–Ω–¥—ã:</i></b>\n\n"

            "<i>–ê–Ω–∞–ª–∏–∑:</i>\n"
            "/start ‚Äî üòä–ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π\n"
            "/help ‚Äî üìã–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –í–∞–º\n"
            "/get_table ‚Äî üìë–í–∞–º –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Ñ–∞–π–ª xlsx (EXL-—Ç–∞–±–ª–∏—Ü–∞),\n"
            "—Å–æ–±—Ä–∞–Ω–Ω–∞—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏:\n"
            "–Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü, –≥–æ–¥ –∏–ª–∏ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç.\n"
            "/notification ‚Äî üëÄ–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "–æ –Ω–æ–≤—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç–∞—Ö\n"
            "/status ‚Äî üìä–í—ã–≤–æ–¥–∏—Ç –≤–∞—à –Ω—ã–Ω–µ—à–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"

            "<i>–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:</i>\n"
            "/ban ‚Äî –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "(–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞).\n"
            "/add_user ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )

        with open('img/startimg1.png', 'rb') as photo:
            bot.send_photo(photo=photo, chat_id=message.chat.id, parse_mode='html', caption=hi_text_admin)
    else:
        ic(usr_id)
        with open('img/startimg1.png', 'rb') as photo:
            bot.send_photo(photo=photo, chat_id=message.chat.id, parse_mode='Markdown', caption=
"""
–ü—Ä–∏–≤–µ—Çüëã

–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã Coffee Like!
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞—à—É –¥—Ä—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å, –Ω–æ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ 18 –ª–µ—Ç —É–∑–Ω–∞–π—Ç–µ –ø—Ä–æ –ê–∫–∞–¥–µ–º–∏—é Coffee Like.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã:

/start ‚Äî üòä–ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π
/info ‚Äî üìÉ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç
/status ‚Äî üìä–°—Ç–∞—Ç—É—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã –ø—Ä–µ–±—ã–≤–∞–µ—Ç–µ
""")
        ic(usr_id)
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ê–∫–∞–¥–µ–º–∏—è", callback_data='academy'))
        keyboard.add(InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data='poll'))
        keyboard.add(InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ", callback_data='info_work'))

        msg = bot.send_message(chat_id=message.chat.id, text='–û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=keyboard)
        user_ids[msg.id] =  message.from_user.id
        ic(msg.id)

@bot.callback_query_handler(func = lambda callback: callback.data in ['academy', 'poll', 'info_work'])
def new_step(callback):
    if callback.data == 'academy':
        message_text = (
        "*–ê–∫–∞–¥–µ–º–∏—è –±–∞—Ä–∏—Å—Ç–∞* ‚Äî –æ–±—É—á–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 4 –¥–Ω–µ–π, –≥–¥–µ —Ä–µ–±—è—Ç–∞ –∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ —É—á–∞—Ç—Å—è –≤–∞—Ä–∏—Ç—å —ç—Å–ø—Ä–µ—Å—Å–æ –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏. ‚òïÔ∏è‚ú®\n\n"
        "–í –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–±—É—á–µ–Ω–∏—è:\n"
        "- *–î–µ–Ω—å 1*: **–í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∏—Ä –∫–æ—Ñ–µ.** üåç‚òïÔ∏è  \n"
        "  - –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ñ–µ –∏ –µ–≥–æ —Å–æ—Ä—Ç–∞.  \n"
        "  - –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º: –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã, –∫–æ—Ñ–µ–º–æ–ª–∫–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã.  \n\n"
        "- *–î–µ–Ω—å 2*: **–û—Å–Ω–æ–≤—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —ç—Å–ø—Ä–µ—Å—Å–æ.** üéì‚òïÔ∏è  \n"
        "  - –¢–µ—Ö–Ω–∏–∫–∞ –ø–æ–º–æ–ª–∞ –∏ –¥–æ–∑–∏—Ä–æ–≤–∫–∏.  \n"
        "  - –ü—Ä–∞–∫—Ç–∏–∫–∞: –≤–∞—Ä–∏–º –∏–¥–µ–∞–ª—å–Ω—ã–π —ç—Å–ø—Ä–µ—Å—Å–æ!  \n\n"
        "- *–î–µ–Ω—å 3*: **–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–æ—Ñ–µ–π–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏.** üçµ‚ù§Ô∏è  \n"
        "  - –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø—É—á–∏–Ω–æ, –ª–∞—Ç—Ç–µ –∏ –∞–º–µ—Ä–∏–∫–∞–Ω–æ.  \n"
        "  - –ò—Å–∫—É—Å—Å—Ç–≤–æ –ª–∞—Ç—Ç–µ-–∞—Ä—Ç–∞: —Å–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ —É–∑–æ—Ä—ã –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Ç–∫–∞. üé®‚ú®  \n\n"
        "- *–î–µ–Ω—å 4*: **–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞.** üîçüí™  \n"
        "  - –°–æ–≤–µ—Ç—ã –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.  \n"
        "  - –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: –≥–æ—Ç–æ–≤–∏–º –Ω–∞–ø–∏—Ç–∫–∏ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ.  \n\n"
        "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ —Å–º–æ–∂–µ—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω–µ **Coffee Like**! üéìüèÜ"
    )
        bot.reply_to(message=callback.message, text=message_text, parse_mode = "Markdown")
    elif callback.data == 'poll':
        ic(callback.message.id)
        user_id = user_ids[callback.message.id]
        user_answers[user_id] = {}
        user_answers[user_id]["username"] = "@" + db.get_user(user_id)['username']
        current_date = datetime.now().date()
        user_answers[user_id]["date"] = current_date
        user_question_index[user_id] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        users_is_poll[user_id] = 1
        ask_question(user_id)

    elif callback.data == 'info_work':
        message_text = (
            "*1. –°—Ä–æ–∫ —Ä–∞–±–æ—Ç—ã –±–∞—Ä–∏—Å—Ç–∞:*\n"
        "   –í —Å—Ä–µ–¥–Ω–µ–º 10 –º–µ—Å—è—Ü–µ–≤. ‚òïÔ∏èüìÖ‚ú®\n\n"
        "*2. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞:*\n"
        "   –ë–∞—Ä–∏—Å—Ç–∞ –º–æ–≥—É—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ç–∏ –∫–æ—Ñ–µ–µ–Ω, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ –¥—Ä—É–≥–∏–µ –æ—Ç–¥–µ–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏. "
        "–ï—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —É–∂–µ 3-4 –≥–æ–¥–∞. üöÄüåü\n\n"
        "*3. –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:*\n"
        "   –ì–∏–±–∫–∏–π, —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–º–µ–Ω, –≤–∫–ª—é—á–∞—è:\n"
        "   - 5/2 (—Ä–µ–∂–µ); üìÖ\n"
        "   - 2/2, 2/3, 3/2; üîÑ\n"
        "   - –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø–æ 12 —á–∞—Å–æ–≤; ‚è∞\n"
        "   - –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–º–µ–Ω—ã (—Å 8:00/9:00/10:00 –¥–æ 14:00) –∏ –≤–µ—á–µ—Ä–Ω–∏–µ —Å–º–µ–Ω—ã (—Å 14:00 –¥–æ 22:00). üåÖüåÜ\n\n"
        "*4. –û–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞:*\n"
        "   - –°—Ç–∞–∂–µ—Ä ‚Äî 150 —Ä—É–±–ª–µ–π –≤ —á–∞—Å; üíµ\n"
        "   - –ü–æ—Å–ª–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ ‚Äî 200 —Ä—É–±–ª–µ–π –≤ —á–∞—Å; üí∞\n"
        "   - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –æ—Ç 1% –¥–æ 3% –æ—Ç –ø—Ä–æ–¥–∞–∂. üìà"

        )
        bot.reply_to(message=callback.message, text=message_text, parse_mode = "Markdown")


@bot.message_handler(func = lambda message:message.text == '–≥–æ–π–¥–∞'[0:len(message.text)])
def goida(message):
    bot.send_message(message.chat.id, '–≥–æ–π–¥–∞'[len(message.text):5])


# all users




# admin

@bot.message_handler(commands = ['get_table'], func= lambda message: db.is_admin(message.from_user.id))
def get_table(message):
    ic(message.from_user.id)
    kb = InlineKeyboardMarkup(row_width=3)
    week = InlineKeyboardButton(text='–ú–µ—Å—è—Ü', callback_data='week')
    mounth = InlineKeyboardButton(text='–ù–µ–¥–µ–ª—è', callback_data='mounth')
    year = InlineKeyboardButton(text='–ì–æ–¥', callback_data='year')
    all_data = InlineKeyboardButton(text='–í—Å–µ', callback_data='all')

    kb.add(week, mounth, year, all_data)
    bot.send_message(message.chat.id, "–¢–∞–±–ª–∏—Ü—É –∑–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ —Ç—ã —Ö–æ—á–µ—à—å?", reply_markup=kb) #—Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥

@bot.callback_query_handler(func = lambda callback: callback.message.text == "–¢–∞–±–ª–∏—Ü—É –∑–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ —Ç—ã —Ö–æ—á–µ—à—å?") #–µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
def table(callback):
    date_to_days = {'week': 7, 'mounth' : 30, 'year': 365}
    if callback.data != 0:
        with open('db/applicants.xlsx', 'rb') as file:
            bot.send_document(chat_id=callback.message.chat.id, document=file)

    else:
        new_date = datetime.now().date() - timedelta(days=date_to_days[callback.data])
        filter_file = filter_exel(input_file='db/applicants.xlsx', date=date_to_days)
        with open(filter_file, 'rb') as file:
            bot.send_document(chat_id=callback.from_chat.id, document=file)
        try:
            os.remove(filter_file)
            print(f"–§–∞–π–ª {filter_file} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

@bot.message_handler(commands=['notification'], func= lambda message: db.is_admin(message.from_user.id)) #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def pushes(message):
    usr_id = message.from_user.id
    is_push = db.is_notif(usr_id)
    kb = InlineKeyboardMarkup(row_width=1)
    esc = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='esc')
    change = InlineKeyboardButton(text='–î–∞', callback_data='change')
    kb.add(change, esc)
    if is_push:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –ñ–µ–ª–∞–µ—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å?", reply_markup=kb)
    else:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã. –ñ–µ–ª–∞–µ—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å?", reply_markup=kb)

@bot.callback_query_handler(func = lambda callback : callback.data == 'esc')#–µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
def change_push(callback):
    bot.delete_message(callback.message.chat.id, callback.message.id)

@bot.callback_query_handler(func = lambda callback : callback.data == 'change')#–µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
def change_push(callback):
    usr_id = callback.from_user.id
    is_push = db.is_notif(usr_id)

    bot.delete_message(callback.message.chat.id, callback.message.id)
    if is_push == False:
        is_push = True
        bot.send_message(callback.message.chat.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!')
    else:
        is_push = False
        bot.send_message(callback.message.chat.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!')
    db.edit_notif(usr_id=usr_id,a=is_push)

@bot.message_handler(commands = ['ban'], func = lambda message: db.is_admin(message.from_user.id) or db.is_dev(message.from_user.id)) #–Ω—É –±–∞–Ω
def ban(message):
    sent = bot.send_message(message.chat.id, "–ö–æ–≥–æ –±–∞–Ω–∏—Ç—å?")
    bot.register_next_step_handler(sent, baned) #–∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞


def baned(message):
    usr_id = db.get_id(message.text)

    role = db.get_role(usr_id)
    if role is None:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    if role == 'user':
        kb = InlineKeyboardMarkup(row_width=1)
        esc = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='esc')
        ban = InlineKeyboardButton(text='–î–∞', callback_data=f'ban_{message.text}')
        kb.add(ban,esc)
        bot.send_message(message.chat.id, "–ó–∞–±–∞–Ω–∏—Ç—å?", reply_markup=kb)
    elif role == 'ban':
        kb = InlineKeyboardMarkup(row_width=1)
        esc = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='esc')
        unban = InlineKeyboardButton(text='–î–∞', callback_data=f'unban_{message.text}')
        kb.add(unban, esc)
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω. –ñ–µ–ª–∞–µ—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å?", reply_markup=kb)
    elif role == 'admin' or role == 'dev':
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


@bot.callback_query_handler(func = lambda callback : callback.data.split('_')[0] == 'ban')
def ban(callback):
    usr_id = db.get_id(callback.data.split('_')[1])
    ic(usr_id)
    db.edit_rol(usr_id=usr_id, role='ban')
    bot.send_message(callback.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")


@bot.callback_query_handler(func = lambda callback : callback.data.split('_')[0] == 'unban')
def unban(callback):
    usr_id = db.get_id(callback.data.split('_')[1])
    db.edit_rol(usr_id=usr_id, role='user')
    bot.send_message(callback.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")



@bot.message_handler(commands=['agree'], func=lambda message: db.is_admin(message.from_user.id) or db.is_dev(message.from_user.id))
def accept(message):
    sent = bot.send_message(message.chat.id, "–ö–æ–≥–æ –æ–¥–æ–±—Ä—è–µ–º?")
    bot.register_next_step_handler(sent, accepted)  # –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞

def accepted(message):
    usr_id = db.get_id(message.text)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç ID –∏–ª–∏ –∏–º—è
    role = db.get_role(usr_id)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if role:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        bot.send_message(db.get_user(usr_id)["chat_id"], "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø–æ–∑–∂–µ.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.message_handler(commands = ['add_admin'], func= lambda message: db.is_dev(message.from_user.id))
def add_admin(message):
    sent = bot.send_message(message.chat.id, "–ö–æ–≥–æ?")
    bot.register_next_step_handler(sent, admin)

def admin(message):
    username = message.text[1:]
    id = db.get_id(username)
    role = db.get_role(id)
    if not role:
        bot.send_message(message.chat.id, "–ù–µ—Ç –≤ –±–¥")
        return
    db.edit_rol(id, 'admin')
    db.edit_notif(id, True)
    bot.send_message(message.chat.id, "—Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω")

@bot.message_handler(commands = ['add_dev'], func= lambda message: db.is_dev(message.from_user.id))
def add_dev(message):
    sent = bot.send_message(message.chat.id, "–ö–æ–≥–æ?")
    bot.register_next_step_handler(sent, dev)

def dev(message):
    username = message.from_user.username[1:]
    id = message.from_user.id
    role = db.get_role(id)
    if not role:
        bot.send_message(message.chat.id, "–ù–µ—Ç –≤ –±–¥")
        return
    db.edit_rol(id, 'dev')
    db.edit_notif(id, True)
    bot.send_message(message.chat.id, "—Ç–µ–ø–µ—Ä—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω")


# admin

# user

def create_inline_keyboard(current_index, total_questions):
    keyboard = InlineKeyboardMarkup()
    back = InlineKeyboardButton("‚è™", callback_data='back')
    forward = InlineKeyboardButton("‚è©", callback_data='forward')
    if current_index == 0:
        keyboard.add(back)
    elif current_index == total_questions - 1:
        keyboard.add(forward)
    else:
        keyboard.add(back, forward)
    return keyboard

def create_reply_keyboard(options):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for option in options:
        keyboard.add(KeyboardButton(option))
    return keyboard

@bot.message_handler(commands=['poll'], func = lambda message: not db.is_admin(message.from_user.id) and message.from_user.id in users_is_poll)
def start_quiz(message):
    ic(message.from_user.username)
    user_id = message.from_user.id
    user_answers[user_id] = {}
    user_answers[user_id]["username"] = "@" + message.from_user.username
    current_date = datetime.now().date()
    user_answers[user_id]["date"] = current_date
    user_question_index[user_id] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    ask_question(user_id)

def ask_question(user_id):
    question_index = user_question_index[user_id]
    if question_index < len(questions):
        question, answer_options = questions[question_index]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        if answer_options == 0:  # –û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å
            if questions[question_index][0] in  user_answers[user_id].keys():
                bot.send_message(user_id, question + f"\n*–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç: *{user_answers[user_id][questions[question_index][0]]}", parse_mode='Markdown')
            else:
                bot.send_message(user_id, question)

        else:  # –ó–∞–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å
            ic(questions[question_index][0])
            ic(user_answers[user_id].keys())

            reply_keyboard = create_reply_keyboard(answer_options)
            if questions[question_index][0] in  user_answers[user_id].keys():
                bot.send_message(user_id, question + f"\n*–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç: *{user_answers[user_id][questions[question_index][0]]}", reply_markup=reply_keyboard, parse_mode='Markdown')
            else:
                bot.send_message(user_id, question, reply_markup=reply_keyboard)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        inline_keyboard = create_inline_keyboard(question_index, len(questions))
        msg = bot.send_message(user_id, "*–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º*", parse_mode='Markdown', reply_markup=inline_keyboard)
        user_message_ids_to_del[user_id] = msg.message_id
    else:
        count = 1
        answers = ""
        for i in questions:
            answers += f"{count}. {i[0]}: ___{user_answers[user_id][i[0]]}___\n"
            count += 1
        bot.send_message(user_id, "*–û–ø—Ä–æ—Å –ø—Ä–æ–π–¥–µ–Ω.*\n–í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:" + answers, parse_mode='markdown')
        add_row_to_excel(file_path=excel_file, new_row=user_answers[user_id])
        users_is_poll.remove(user_id)
        del user_answers[user_id]
        del user_question_index[user_id]
        del user_message_ids_to_del[user_id]

@bot.callback_query_handler(func=lambda call: call.data in ['back', 'forward'])
def handle_callback_query(call):
    user_id = call.from_user.id
    question_index = user_question_index[user_id]

    if call.data == 'back':
        if question_index > 0:
            user_question_index[user_id] -= 1
            ask_question(user_id)
    elif call.data == 'forward':
        if question_index < len(questions) - 1:
            user_question_index[user_id] += 1
            ask_question(user_id)


@bot.message_handler(func=lambda message: message.from_user.id in user_question_index and not db.is_admin(message.from_user.id))
def handle_response(message):
    user_id = message.from_user.id
    """
    if user_id not in user_question_index:
        return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    """
    question_index = user_question_index[user_id]
    question, answer_options = questions[question_index]

    if answer_options == 0:  # –û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        user_answers[user_id][questions[user_question_index[user_id]][0]] = message.text
        user_question_index[user_id] += 1
        if user_id in user_message_ids_to_del:
            try:
                bot.delete_message(chat_id=user_id, message_id=user_message_ids_to_del[user_id])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        ask_question(user_id)
    elif message.text in answer_options:  # –ó–∞–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        user_answers[user_id][questions[user_question_index[user_id]][0]] = message.text

        user_question_index[user_id] += 1

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!", reply_markup=ReplyKeyboardRemove())
        if user_id in user_message_ids_to_del:
            try:
                bot.delete_message(chat_id=user_id, message_id=user_message_ids_to_del[user_id])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        ask_question(user_id)

# user



bot.polling(none_stop=True)